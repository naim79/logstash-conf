input {
    tcp {
        port => 5045
        type => syslog
    }
}

filter {
    mutate {
        gsub => [
            "message", "[\u0000]", ""
        ]
        remove_field => ["timestamp", "host", "facility_label", "severity_label", "severity", "facility", "priority"]
    }


    grok {
        match => {"message" => "<%{NUMBER:priority_index}>%{DATESTAMP_OTHER:apigeeTimestamp}%{LOGLEVEL}: %{GREEDYDATA:apigeeMessage}"}
        remove_field => ["message"]
    }

    #Remove Problematic Backslashes
    ruby {
        code => " if event.get('apigeeMessage')
                  event.set('apigeeMessage', event.get('apigeeMessage').gsub('\E','/E'))
                  event.set('apigeeMessage', event.get('apigeeMessage').gsub('\\E','//E'))
                  end
                "
    }

    #Parse JSON
    json {
        #skip_on_invalid_json => true
        source => "apigeeMessage"
        remove_field => [ "apigeeMessage" ]
    }

    if [target][host] and [target][port] and [target][basepath] {
        mutate {
        mutate {
            add_field => { "target.fullURL" => "https://%{[target][host]}:%{[target][port]}%{[target][basepath]}" }
        }
    }else{
        if [target][targetURL]{
            mutate {
                add_field => { "target.fullURL" => "%{[target][targetURL]}" }
            }
        }
    }

    # Unescape XML backend response and request
    if [backendRequest] =~ /&lt;|&gt;|&amp;|&quot;|&apos;/ {
        mutate {
            gsub => [
                "backendRequest", "&lt;", "<",
                "backendRequest", "&gt;", ">",
                "backendRequest", "&amp;", "&",
                "backendRequest", "&quot;", '"',
                "backendRequest", "&apos;", "'"
            ]
        }
    }
    if [backendResponse] =~ /&lt;|&gt;|&amp;|&quot;|&apos;/ {
        mutate {
            gsub => [
                "backendResponse", "&lt;", "<",
                "backendResponse", "&gt;", ">",
                "backendResponse", "&amp;", "&",
                "backendResponse", "&quot;", '"',
                "backendResponse", "&apos;", "'"
            ]
        }
    }
    if [proxyRequest] =~ /&lt;|&gt;|&amp;|&quot;|&apos;/ {
        mutate {
            gsub => [
                "proxyRequest", "&lt;", "<",
                "proxyRequest", "&gt;", ">",
                "proxyRequest", "&amp;", "&",
                "proxyRequest", "&quot;", '"',
                "proxyRequest", "&apos;", "'"
            ]
        }
    }
    if [proxyResponse] =~ /&lt;|&gt;|&amp;|&quot;|&apos;/ {
        mutate {
            gsub => [
                "proxyResponse", "&lt;", "<",
                "proxyResponse", "&gt;", ">",
                "proxyResponse", "&amp;", "&",
                "proxyResponse", "&quot;", '"',
                "proxyResponse", "&apos;", "'"
            ]
        }
    }

    #XML
    if [contentType] =~ /xml/ {
        #Parse XML
        xml {
            source => "proxyResponse"
            target => "sourceApplication"
            store_xml => false
            xpath => [
                "//*[local-name()='sourceApplication']/text()", "sourceApplication",
                "//*[local-name()='sourceApp']/text()", "sourceApplication",
                "//*[local-name()='SourceApp']/text()", "sourceApplication",
                "//*[local-name()='responseCode']/text()", "business.responseCode",
                "//*[local-name()='response_code']/text()", "business.responseCode",
                "//*[local-name()='responseDescription']/text()", "business.responseDescription",
                "//*[local-name()='response_desc']/text()", "business.responseDescription",
                "//*[local-name()='response_message']/text()", "business.responseDescription",
                "//*[local-name()='errorCode']/text()", "business.errorCode",
                "//*[local-name()='error_code']/text()", "business.errorCode",
                "//*[local-name()='errorDescription']/text()", "business.errorDescription",
                "//*[local-name()='error_desc']/text()", "business.errorDescription"
            ]
            namespaces => {
                "soapenv" => "http://schemas.xmlsoap.org/soap/envelope/"
            }
        }
        if ![sourceApplication]{
            xml {
                source => "proxyRequest"
                target => "sourceApplication"
                store_xml => false
                xpath => [
                    "//*[local-name()='sourceApplication']/text()", "sourceApplication",
                    "//*[local-name()='sourceApp']/text()", "sourceApplication",
                    "//*[local-name()='SourceApp']/text()", "sourceApplication"
                ]
                namespaces => {
                    "soapenv" => "http://schemas.xmlsoap.org/soap/envelope/"
                }
            }
        }
    }

    #JSON
    if [contentType] == "application/json"{
        json {
            source => "proxyResponse"
            target => "parsed_json"
        }
        if [parsed_json][sourceApplication] {
            mutate {add_field => { "sourceApplication" => "%{[parsed_json][sourceApplication]}" }}
        }
        ruby {
            code => '
              def find_field(json, field)
                if json.is_a?(Hash)
                  json.each do |key, value|
                    if value.is_a?(Hash)
                      result = find_field(value, field)
                      return result if result
                    elsif key.to_s.match(/^#{field}$/)
                      return value
                    end
                  end
                end
                nil
              end

              parsed_json = event.get("parsed_json")
              if parsed_json
                fields = {
                  "sourceApplication" => "sourceApplication",
                  "sourceApp" => "sourceApplication",
                  "SourceApp" => "sourceApplication",
                  "responseCode" => "business.responseCode",
                  "response_code" => "business.responseCode",
                  "responseDescription" => "business.responseDescription",
                  "response_desc" => "business.responseDescription",
                  "response_message" => "business.responseDescription",
                  "errorCode" => "business.errorCode",
                  "error_code" => "business.errorCode",
                  "errorDescription" => "business.errorDescription",
                  "error_desc" => "business.errorDescription"
                }
                fields.each do |field, name|
                  value = find_field(parsed_json, field)
                  event.set(name, value) if value
                end
              end
            '
        }
        mutate {remove_field => ["parsed_json"]}
    }
}
output {
    if [rearrangeElements] == "true" {
        elasticsearch {
            hosts => ["https://localhost:9200"]
            user => "elastic"
            password => "NWCorgadmin@1234"
            ssl_certificate_verification => false
            index => "dup-rearrange-apigee"
        }
    } else {
        elasticsearch {
            hosts => ["https://localhost:9200"]
            user => "elastic"
            password => "XXXXXXXXXXXXX"
            ssl_certificate_verification => false
            index => "apigee"
        }
    }
    stdout { codec => rubydebug }
}

